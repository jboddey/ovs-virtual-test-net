#!/bin/bash -e

ROOT=$(dirname $0)/..
cd $ROOT

INST_DIR=inst
SYSTEM_CONF=config/system.json

container_name=$1
port_no=$2
bridge=tr-dev-$port_no
container_intf=tr-$container_name
bridge_intf=tr-dev-$container_name

echo Creating ip link interfaces between device bridge and container: $bridge_intf - $container_intf
ip link add $bridge_intf type veth peer name $container_intf

echo Adding device port to bridge: $bridge - $bridge_intf
ovs-vsctl add-port $bridge $bridge_intf

echo Retrieving PID for container
pid="$(docker inspect -f '{{.State.Pid}}' tr-$container_name)"
echo PID of container is $pid

echo Creating symlink for net namespace tr-$container_name
ln -sf /proc/$pid/ns/net /var/run/netns/tr-$container_name

echo Attaching $container_intf to container net namespace tr-$container_name
ip link set $container_intf netns tr-$container_name

echo Renaming $container_intf to eth1
ip netns exec tr-$container_name ip link set dev $container_intf name eth1

# TODO: This needs to be customisable
echo Setting eth0 mac address to 9a:02:57:1e:8f:0$PORT
ip netns exec tr-$container_name ip link set dev eth1 address 9a:02:57:1e:8f:0$PORT

echo Setting IP for container interface
# TODO: This needs to be customisable (not just gateway containers are being created)
ip netns exec tr-$container_name ip addr add 10.20.$port_no.1/24 dev eth1

echo Setting device bridge interface up: $bridge_intf
ip link set dev $bridge_intf up

echo Setting container interface up
ip netns exec tr-$container_name ip link set dev eth1 up

echo Finished the script with no errors
